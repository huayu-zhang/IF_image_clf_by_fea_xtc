Library <- function(x){
if (!require(x, character.only = T, quietly = T))  install.packages(x)
library(x)
}
Library("ggplot2")
Library(ggplot2)
Library <- function(x){
if (!require(x, character.only = T, quietly = T))  install.packages(x)
library(x, character.only = T, quietly = T)
}
Library("tiff")
Library("caret")
install.packages(x)
Library <- function(x){
if (!require(x, character.only = T, quietly = T))  install.packages(pkgs = x)
library(x, character.only = T, quietly = T)
}
Library("caret")
Library <- function(x){
if (!require(x, character.only = T, quietly = T))  install.packages(pkgs = x)
require(x, character.only = T, quietly = T)
}
Library("caret")
install.packages(pkgs = x)
rm(Library)
required_libs <- c("tiff", "ggplot2")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
# Librarys ----------------------------------------------------------------
required_libs <- c("tiff", "ggplot2", "caret")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
required_libs <- c("tiff", "ggplot2", "caret")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0) install.packages(new_libs)
install.packages(new_libs)
library(required_libs)
library(package = required_libs)
library(package = required_libs, character.only = T)
for (i in 1:length(required_libs))
library(required_libs[i], character.only = T)
sessionInfo()
for (i in 1:length(required_libs))
library(required_libs[i], character.only = T)
install.packages(c("digest", "fansi", "foreign", "ggplot2", "lattice", "MASS", "Matrix", "mgcv", "R6", "stringi", "survival"))
required_libs <- c("tiff", "ggplot2", "caret")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0) install.packages(new_libs)
for (i in 1:length(required_libs))
library(required_libs[i], character.only = T)
install.packages(caret, dependencies = T)
install.packages("caret", dependencies = T)
required_libs <- c("tiff", "ggplot2", "caret")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0) install.packages(new_libs)
for (i in 1:length(required_libs))
library(required_libs[i], character.only = T)
sessionInfo()
# Librarys ----------------------------------------------------------------
required_libs <- c("tiff", "ggplot2", "png", "EBImage")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0) install.packages(new_libs, dependencies = T, quiet = T)
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(new_libs)
# Librarys ----------------------------------------------------------------
required_libs <- c("tiff", "ggplot2", "png", "EBImage")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0) install.packages(new_libs, dependencies = T, quiet = T)
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(new_libs)
# Librarys ----------------------------------------------------------------
required_libs <- c("tiff", "ggplot2", "png", "EBImage")
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0) install.packages(new_libs, dependencies = T, quiet = T)
new_libs <- required_libs[!(required_libs %in% installed.packages()[,"Package"])]
if (length(new_libs) > 0)
{
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager", quiet = T)
BiocManager::install(new_libs)
}
for (i in 1:length(required_libs))
library(required_libs[i], character.only = T)
sessionInfo()
rm(list = c(i, new_libs, required_libs))
rm(list = c("i", "new_libs", "required_libs"))
sessionInfo()
# Create file lists -------------------------------------------------------
#train_list <- create.filelist(folder = "raw/train/")
test_files <- list.files(path = "D:/trainMerge/RGB/")
rm(test_files)
trainFiles <- list(
"RGB" = list.files(path = "D:/trainMerge/RGB/"),
"YGB" = list.files(path = "D:/trainMerge/YGB/")
)
test_files <- list(
"RGB" = list.files(path = "D:/testMerge/RGB/"),
"YGB" = list.files(path = "D:/testMerge/YGB/")
)
rm(test_files)
trainFiles <- list(
"RGB" = list.files(path = "D:/trainMerge/RGB/"),
"YGB" = list.files(path = "D:/trainMerge/YGB/")
)
testFiles <- list(
"RGB" = list.files(path = "D:/testMerge/RGB/"),
"YGB" = list.files(path = "D:/testMerge/YGB/")
)
img.Import <- function(index, fileList)
{
imgRGB <- readTIFF(source = fileList$RGB[index])
imgYGB <- readTIFF(source = fileList$YGB[index])
return(list(
R = imgRGB[,,1],
G = imgRGB[,,2],
B = imgRGB[,,3],
Y = imgYGB[,,1]
))
}
img <- img.Import(index = 1, fileList = trainFiles)
trainFiles <- list(
"RGB" = list.files(path = "D:/trainMerge/RGB/", full.names = T),
"YGB" = list.files(path = "D:/trainMerge/YGB/", full.names = T)
)
testFiles <- list(
"RGB" = list.files(path = "D:/testMerge/RGB/", full.names = T),
"YGB" = list.files(path = "D:/testMerge/YGB/", full.names = T)
)
img <- img.Import(index = 1, fileList = trainFiles)
img_median <- sapply(img, function(x) median(x[x != 0]))
img_cutoffs <- img_median/5
testMat <- matrix(1:25, ncol = 5)
testMat[testMat > 5]
thresh
img_cutoffs
img_cutoffs["B"]
img_masks <- list(
B = img$B > img_cutoffs["B"]
)
display(img_masks$B)
img_masks$B <- fillHull(img_masks$B)
display(img_masks$B)
img_masks$B <- watershed(x = distmap(img_masks$B), tolerance = 1, ext = 3)
test_mask <- watershed(x = img$B, tolerance = 0.1, ext = 3)
img_masks$B <- bwlabel(x = img_masks$B)
display(colorLabels(img_masks$B))
wh <- dims(img$R)
wh <- dim(img$R)
table(img_masks$B)
hist(table(img_masks$B))
hist(table(img_masks$B)[-1])
hist(table(img_masks$B)[-1], breaks = 50)
hist(table(img_masks$B)[-1], breaks = 50, xlim = c(0, 5000))
hist(table(img_masks$B)[-1], breaks = 50, xlim = c(0, 1000))
hist(table(img_masks$B)[-1], breaks = 300, xlim = c(0, 1000))
tableLable <- table(img_masks$B)
wh <- dim(img$R)[1]
img_masks$B <- rmObjects(x = img_masks$B, index = tableLable > (wh/512)^2 * 200)
display(colorLabels(img_masks$B))
tableLable > (wh/512)^2 * 200
img_masks$B <- bwlabel(x = img_masks$B)
tableLable <- table(img_masks$B)
img_masks$B <- rmObjects(x = img_masks$B, index = tableLable[tableLable > (wh/512)^2 * 200])
display(colorLabels(img_masks$B))
(wh/512)^2 * 200
img_masks$B <- bwlabel(x = img_masks$B)
tableLable <- table(img_masks$B)
img_masks$B <- rmObjects(x = img_masks$B, index = tableLable[tableLable < (wh/512)^2 * 200])
display(colorLabels(img_masks$B))
tableLable[tableLable < (wh/512)^2 * 200]
img_masks$B <- bwlabel(x = img_masks$B)
tableLable <- table(img_masks$B)
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLable)[tableLable < (wh/512)^2 * 200])
display(colorLabels(img_masks$B))
img_masks$B <- bwlabel(x = img_masks$B)
tableLable <- table(img_masks$B)
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLable)[tableLable < (wh/512)^2 * 100])
display(colorLabels(img_masks$B))
(wh/512)^2 * 100
img_masks$B <- bwlabel(x = img_masks$B)
tableLable <- table(img_masks$B)
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLable)[tableLable < (wh/512)^2 * 50])
display(colorLabels(img_masks$B))
img_masks <- list(
B = img$B > img_cutoffs["B"]
)
img_masks$B <- fillHull(img_masks$B)
img_masks$B <- bwlabel(x = img_masks$B)
tableLable <- table(img_masks$B)
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLable)[tableLable < (wh/512)^2 * 100])
display(colorLabels(img_masks$B))
display(x = img$B)
tableLable <- table(img_masks$B)
hist(tableLable[-1])
sd(tableLable)
mean(tableLable) + 1.98 *sd(tableLable)
mean(tableLable[-1]) + 1.98 *sd(tableLable[-1])
rm(tableLable)
tableLabel <- table(img_masks$B)
sum(tableLabel > mean(tableLabel) + 2*sd(tableLabel))
img_masks <- list(
B = img$B > img_cutoffs["B"]
)
img_masks$B <- fillHull(img_masks$B)
##Naive segmentation
img_masks$B <- bwlabel(x = img_masks$B)
tableLabel <- table(img_masks$B)[-1]
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLable)[tableLable < (wh/512)^2 * 100])
tableLabel <- table(img_masks$B)[-1]
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLabel)[tableLable < (wh/512)^2 * 100])
img_masks$B <- rmObjects(x = img_masks$B, index = names(tableLabel)[tableLabel < (wh/512)^2 * 100])
tableLabel <- table(img_masks$B)[-1]
sum(tableLabel > mean(tableLabel) + 2*sd(tableLabel))
sum(tableLabel > mean(tableLabel) + 2*sd(tableLabel))/length(tableLabel)
sum(tableLabel > mean(tableLabel) + 2*sd(tableLabel)/sqrt(length(tableLabel)))/length(tableLabel)
sum(tableLabel > mean(tableLabel) + 2*sd(tableLabel)/sqrt(length(tableLabel)))
2*sd(tableLabel)/sqrt(length(tableLabel))
mean(tableLabel) + 2*sd(tableLabel)/sqrt(length(tableLabel))
sum(tableLabel > mean(tableLabel) + 2*sd(tableLabel))/length(tableLabel)
display(colorLabels(img_masks$B))
features <-
list(
Nuclei = computeFeatures(x = img_masks$B, ref = img$G)
)
otsu(x = img$G)
otsu(x = img$G) * 256
display(img$G> 17.5)
display(img$G> 0.06)
display(img$G> 0.068)
display(img$G> 0.1)
plot(density.default(x = img$G[img$G > 0.06]))
display(x = img$G > 0.2)
